<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Analytics>
    <Name>success_failed_msisdns_stat_analytics</Name>
    <Script>
    		create temporary table user_status_raw_msisdns_suc_fal using CarbonAnalytics options (tableName "COM_WSO2TELCO_USERSTATUS", schema "_timestamp LONG -i",  incrementalParams "user_status_success_failed_msisdns, DAY");

	create temporary table user_status_meta_raw_msisdns_suc_fal using CarbonAnalytics options (tableName "COM_WSO2TELCO_USERSTATUS_META", schema "_timestamp LONG -i" ,  incrementalParams "user_status_meta_success_failed_msisdns, DAY");

	create temporary table msisdns_success_failed using CarbonAnalytics options (tableName "COM_WSO2TELCO_SUMMARY_MSISDNS_SUCCESS_AND_FAILED", schema "datetime STRING, sessionID STRING -i, msisdn STRING -i, success BOOLEAN -i, failedreason STRING -i, appID STRING -i, operator STRING -i, _timestamp LONG -i", primaryKeys "sessionID,success,failedreason,_timestamp,", mergeSchema "false");


	INSERT into table msisdns_success_failed select time._timestamp,dropouts.sessionID,msisdns.msisdn,false,"ONNET_TC",msisdns.appId,msisdns.operator,time._timestamp from ( select distinct sessionID from user_status_meta_raw_msisdns_suc_fal where isNewUser = true and isMSISDNHeader = true except select distinct sessionID from user_status_raw_msisdns_suc_fal  where status ="LOGIN_SUCCESS" or status="SEND_USSD_PUSH" or status="SEND_SMS" or status="SEND_USSD_PIN" or status="INVALID_REQUEST" ) as dropouts inner join ( select sessionID, min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_msisdns_suc_fal where user_status_meta_raw_msisdns_suc_fal.msisdn IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.operator IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.appId IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.isNewUser =true and user_status_meta_raw_msisdns_suc_fal.isMSISDNHeader = true group by sessionID ) as msisdns on msisdns.sessionID=dropouts.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_msisdns_suc_fal where status !="LOGIN_SUCCESS" and status!="SEND_USSD_PUSH" and status !="SEND_SMS" and status !="SEND_USSD_PIN" and status !="INVALID_REQUEST" group by sessionID ) as time on time.sessionID=dropouts.sessionID;


	INSERT into table msisdns_success_failed select time._timestamp,dropouts.sessionID,msisdns.msisdn,false,"SMS",msisdns.appId,msisdns.operator,time._timestamp from (	select distinct sessionID from user_status_raw_msisdns_suc_fal where status = "SEND_SMS" except  select distinct sessionID from user_status_raw_msisdns_suc_fal where status ="LOGIN_SUCCESS" ) as dropouts inner join ( select sessionID, min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from  user_status_meta_raw_msisdns_suc_fal where user_status_meta_raw_msisdns_suc_fal.msisdn IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.operator IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.appId IS NOT NULL group by sessionID ) as msisdns on msisdns.sessionID=dropouts.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_msisdns_suc_fal where status !="LOGIN_SUCCESS" group by sessionID ) as time on time.sessionID=dropouts.sessionID;


	INSERT into table msisdns_success_failed select time._timestamp,dropouts.sessionID,msisdns.msisdn,false,"MSISDN",msisdns.appId,msisdns.operator,time._timestamp from ( select distinct sessionID from user_status_raw_msisdns_suc_fal where  status = "HE_AUTH_PROCESSING_FAIL" except select distinct sessionID from user_status_raw_msisdns_suc_fal where status ="LOGIN_SUCCESS" or status="MSISDN_AUTH_PROCESSING_FAIL" or status="MSISDN_AUTH_SUCCESS" or status="INVALID_REQUEST" ) as dropouts inner join ( select sessionID, min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_msisdns_suc_fal where user_status_meta_raw_msisdns_suc_fal.msisdn IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.operator IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.appId IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.loginHint is NULL and  user_status_meta_raw_msisdns_suc_fal.isMSISDNHeader = false group by sessionID ) as msisdns on msisdns.sessionID=dropouts.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_msisdns_suc_fal where status !="LOGIN_SUCCESS" and status!="MSISDN_AUTH_PROCESSING_FAIL" and status!="MSISDN_AUTH_SUCCESS" and status!="INVALID_REQUEST" group by sessionID ) as time on time.sessionID=dropouts.sessionID;



	INSERT into table msisdns_success_failed select time._timestamp,dropouts.sessionID,msisdns.msisdn,false,"OFFNET_TC",msisdns.appId,msisdns.operator,time._timestamp from ( select distinct sessionID from user_status_raw_msisdns_suc_fal where  status = "MSISDN_AUTH_PROCESSING_FAIL" except select distinct sessionID from user_status_raw_msisdns_suc_fal where status ="LOGIN_SUCCESS" or status="SEND_USSD_PUSH" or status="SEND_SMS" or status="SEND_USSD_PIN" ) as dropouts inner join ( select sessionID,min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_msisdns_suc_fal where user_status_meta_raw_msisdns_suc_fal.msisdn IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.operator IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.appId IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.isNewUser =true and user_status_meta_raw_msisdns_suc_fal.isMSISDNHeader = false group by sessionID ) as msisdns on msisdns.sessionID=dropouts.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_msisdns_suc_fal where status !="LOGIN_SUCCESS" and status!="MSISDN_AUTH_PROCESSING_FAIL" and status!= "MSISDN_AUTH_SUCCESS" and status!="INVALID_REQUEST" group by sessionID ) as time on time.sessionID=dropouts.sessionID;



	INSERT into table msisdns_success_failed select allussdfailed._timestamp,allussdfailed.sessionID,allussdfailed.msisdn,false,"USSD_PUSH",allussdfailed.appId,allussdfailed.operator,allussdfailed._timestamp from ( select ussdfail.sessionID, msisdns.msisdn, time._timestamp, msisdns.operator, msisdns.appId ,time.lasttimestamp from( select distinct sessionID from user_status_raw_msisdns_suc_fal where status = "SEND_USSD_PUSH" except select distinct sessionID from 	user_status_raw_msisdns_suc_fal where status = "LOGIN_SUCCESS" ) as ussdfail inner join ( select sessionID, min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_msisdns_suc_fal where user_status_meta_raw_msisdns_suc_fal.msisdn IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.operator IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.appId IS NOT NULL group by sessionID ) as msisdns on msisdns.sessionID=ussdfail.sessionID inner join ( select sessionID, min(_timestamp) as _timestamp, max(_timestamp) as lasttimestamp from user_status_raw_msisdns_suc_fal where status !="LOGIN_SUCCESS" group by sessionID  ) as time on time.sessionID=ussdfail.sessionID ) as allussdfailed left join ( select allmsisdns.msisdn,allmsisdns.operator,allmsisdns.appId,smssend._timestamp from ( select sessionID, min(_timestamp) as _timestamp from user_status_raw_msisdns_suc_fal where status = "SEND_SMS" group by sessionID ) as smssend inner join ( select sessionID, min(msisdn) as msisdn,min(operator) as operator,min(appId) as appId from user_status_meta_raw_msisdns_suc_fal where user_status_meta_raw_msisdns_suc_fal.msisdn IS NOT NULL	and user_status_meta_raw_msisdns_suc_fal.operator IS NOT NULL and user_status_meta_raw_msisdns_suc_fal.appId IS NOT NULL group by sessionID ) as allmsisdns on allmsisdns.sessionID=smssend.sessionID ) as sendsms on allussdfailed.msisdn=sendsms.msisdn and 0 &lt; sendsms._timestamp - allussdfailed.lasttimestamp and sendsms._timestamp - allussdfailed.lasttimestamp &lt;= 120000 and allussdfailed.operator=sendsms.operator and allussdfailed.appId=sendsms.appId where sendsms.msisdn is NULL;



        INCREMENTAL_TABLE_COMMIT user_status_success_failed_msisdns;
        INCREMENTAL_TABLE_COMMIT user_status_meta_success_failed_msisdns;
    </Script>
    <CronExpression>0 0 0 1/1 * ? *</CronExpression>
</Analytics>
